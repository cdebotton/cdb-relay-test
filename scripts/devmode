#!/usr/bin/env node_modules/.bin/babel-node --stage=0

import blessed from 'blessed';
import open from 'open';
import {StringDecoder} from 'string_decoder';
import {spawn} from 'pty.js';

const APP_PORT = process.env.PORT || 3000;

const decoder = new StringDecoder('utf-8');
const screen = blessed.screen({
  smartCSR: true,
  terminal: 'xterm-256color',
  fullUnicode: true,
  dockBorders: true,
  autoPadding: true,
  forceUnicode: true,
});

const commands = {
  'Web Server': 'npm run server:development -s',
  'Webpack Development Server': 'npm run webpack:watch -s',
  'ESLint': 'npm run lint:watch -s',
  'Relay Schema': 'npm run schema:watch -s',
  'Webpack Node': 'npm run webpack-node:watch -s',
  'Mocha': 'npm run test:watch -s',
};

let actives = [];
const buttons = [];

const nav = blessed.layout({
  parent: screen,
  top: 0,
  left: 0,
  width: '100%',
  height: 1,
  padding: {
    left: 1,
    right: 1,
  },
});

const terminals = Object.keys(commands).map((name) => {
  return {label: name, command: commands[name]};
}).map((commandObject, key) => {
  const {label, command} = commandObject;
  const [cmd, ...opts] = command.split(' ');
  const width = Math.floor(screen.cols / Object.keys(commands).length);
  const box = blessed.box({
    label: ` ${label} `,
    padding: {
      top: 2,
      right: 2,
      bottom: 1,
      left: 2,
    },
    scrollable: true,
    alwaysScroll: true,
    mouse: true,
    keys: true,
    vi: true,
    top: 2,
    content: `Waiting for ${label} content...\n`,
    height: screen.rows - 3,
    width: width + 1,
    left: key * (width),
    parent: screen,
    scrollbar: {
      ch: 'o',
    },
    border: 'line',
    style: {
      bg: '#111111',
      border: {
        bg: '#111111',
        fg: 'yellow',
      },
      label: {
        fg: 'yellow',
        bg: 'blue',
      },
      scrollbar: {
        fg: 'red',
        hover: {
          fg: 'yellow',
        },
      },
    },
  });

  if (key > 0) {
    const seperator = blessed.box({
      parent: nav,
      content: ' ',
      padding: {
        top: 1,
        bottom: 1,
      },
    });
  }

  const button = blessed.box({
    parent: nav,
    content: ` ${label} `,
    top: 1,
    padding: {
      left: 1,
      right: 1,
    },
    style: {
      bg: 'white',
      fg: 'black',
      hover: {
        bg: 'red',
        fg: 'black',
      }
    },
  });

  buttons.push(button);

  button.on('click', (data) => {
    const index = actives.indexOf(box);

    if (index > -1) {
      actives = [
        ...actives.filter((terminal) => {
          return terminal !== box;
        }),
      ];

      buttons[key].style = {
        ...buttons[key].style,
        fg: 'white',
        bg: 'black',
      };
    } else {
      actives = terminals.filter((terminal) => {
        if (actives.indexOf(terminal) > -1) {
          return terminal;
        } else if (terminal === box) {
          return terminal;
        }
      });

      buttons[key].style = {
        ...buttons[key].style,
        fg: 'black',
        bg: 'white',
      };
    }

    terminals.forEach((terminal) => {
      const width = Math.floor(screen.cols / Object.keys(actives).length);
      const activeIndex = actives.indexOf(terminal);
      if (activeIndex > -1) {
        terminal.width = width + 1;
        terminal.left = activeIndex * width;
      } else {
        terminal.width = 0;
      };
    });

    screen.render();
  });

  const program = spawn(cmd, opts);

  actives.push(box);

  program.stdout.on('data', (data) => {
    box.pushLine(decoder.write(data));
    const scrollHeight = box.getScrollHeight();
    box.setScroll(scrollHeight);
    screen.render();
  });

  return box;
});

const openButton = blessed.button({
  parent: screen,
  content: 'Open in browser',
  left: '100%-18',
  height: 1,
  right: 1,
  padding: {
    left: 1,
    right: 1,
  },
  style: {
    bg: 'red',
    fg: 'white',
    hover: {
      bg: 'red',
      fg: 'black',
    }
  },
});

openButton.on('click', () => open(`http://localhost:${APP_PORT}`));

screen.key(['C-c', 'esc', 'q'], () => {
  screen.destroy();
  process.exit();
});

screen.render();
